3.1.11
1. Using the value -35, write it as an integer literal in decimal, hexadecimal, octal, and binary formats that are consistent with
    MASM syntax.
    -35d, DDh, 335o, 11011101b
2. (Yes/No):Is A5h a valid hexadecimal literal?
    No, a leading zero is required.
3. (Yes/No):Does the multiplication operation (*) have a higher precedence than the division operator (/) in integer expressions?
    No, they have the same precedence.
4. Create a single integer expression that uses all the operators from Section 3.1.2. Calculate the value of the expression.
    Expression: 30 MOD (3 * 4) + (3 – 1) / 2 = 20

3.2.4
4. In the AddTwo program, which register holds the sum?
    EAX
5. In the AddTwo program, which statement halts the program?
    INVOKE ExitProcess,0.

3.3.3
1. What type of files are produced by the assembler?
    Object (.OBJ) and listing (.LST) files
2. (True/False):The linker extracts assembled procedures from the link library and inserts them in the executable program.
    True
3. (True/False):When a program's source code is modified, it must be assembled and linked again before it can be executed with the change.
    True
4. Which operating system component reads and executes programs?
    Loader

3.4.13
1. Create an uninitialized data declaration for a 16-bit signed integer.
    var1 SWORD ?
2. Create an uninitialized data declaration for an 8-bit unsigned integer.
    var2 BYTE ?
3. Create an uninitialized data declaration for an 8-bit signed integer.
    var3 SBYTE ?
4. Create an uninitialized data declaration for a 64-bit integer.
    var4 QWORD ?
5. Which data type can hold a 32-bit signed integer?
    SDWORD

3.5.5
3. Write a statement that causes the assembler to calculate the number of bytes in the following array, and assign the value to a
    symbolic constant named ArraySize:
              myArray WORD 20 DUP(?)
        ArraySize = ($ - myArray)

3.9.1
4. Explain why the term assembler language is not quite correct.
    To say that you are programming in assembler is like saying you are programming in compiler when talking about the C/C++ language.
    An assembler is a program that converts English like assembly language statements into machine code.
    
5. Explain the difference between big endian and little endian. Also, look up the origins of the term on the Web.
    x86 processors store and retrieve data from memory using little-endian order (low to high). The
    least significant byte is stored at the first memory address allocated for the data. The remaining
    bytes are stored in the next consecutive memory positions. Some other computer systems use big-endian order, 
    which is high to low. The terms big-endian and little-endian were introduced by Danny Cohen in 1980 in Internet 
    Engineering Note 137, a memorandum entitled "On Holy Wars and a Plea for Peace", subsequently published in print 
    form in IEEE Computer 14(10).48-57 (1981). He borrowed them from Jonathan Swift, who in Gulliver's Travels (1726) 
    used them to describe the opposing positions of two factions in the nation of Lilliput. The Big-Endians, who broke 
    their boiled eggs at the big end, rebelled against the king, who demanded that his subjects break their eggs at the 
    little end.
6. Why might you use a symbolic constant rather than an integer literal in your code?
    Programs are easier to read maintain if symbols are used.
25. Which data directive creates a 32-bit signed integer variable?
    The equal-sign directive associates a symbol name with an integer expression. The syntax is name = expression. 
    Ordinarily, expression is a 32-bit integer value. When a program is assembled, all occurrences of name are replaced
    by expression during the assembler’s preprocessor step.
3.9.2
4. Find out if you can declare a variable of type DWORD and assign it a negative value. What does this tell you about the assembler's
    type checking?
    
7. Declare an array of 120 uninitialized unsigned doubleword values.

13. Declare a string variable containing the word "TEST" repeated 500 times.

3.10
3. Write a program that contains a defintion of each data type listed in Table 3-2 in Section 3.4 (p.74). Initialize each variable
    to a value that is consistent with its data type.

